use std::fmt;
use url;

/// The default image to display if the user's email does not have a Gravatar.
///
/// See <https://en.gravatar.com/site/implement/images/#default-image>.
#[derive(Clone, Debug)]
pub enum Default {
    /// The URL of an image file to display as the default.
    ImageUrl(String),

    /// Instead of loading an image, the Gravatar URL will return an HTTP 404 (File Not Found)
    /// response if the email is not found.
    Http404,

    /// A transparent PNG image.
    Blank,

    /// A simple, cartoon-style silhouetted outline of a person that does not vary by email hash.
    MysteryPerson,

    /// A geometric pattern based on the email hash.
    Identicon,

    /// A "monster" with different colors, faces, etc. that are generated by the email hash.
    MonsterId,

    /// A face with different features and backgrounds, generated by the email hash.
    Wavatar,

    /// An 8-bit arcade-style pixelated face that is generated by the email hash.
    Retro,

    /// A generated robot with different colors, faces, etc.
    RoboHash,
}

impl std::fmt::Display for Default {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let val = match self {
            Default::Http404 => "404",
            Default::MysteryPerson => "mp",
            Default::Identicon => "identicon",
            Default::MonsterId => "monsterid",
            Default::Wavatar => "wavatar",
            Default::Retro => "retro",
            Default::RoboHash => "robohash",
            Default::Blank => "blank",
            Default::ImageUrl(ref u) => {
                &url::form_urlencoded::byte_serialize(u.as_bytes()).collect::<String>()
            }
        };
        f.write_str(val)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_to_string() {
        assert_eq!(Default::Http404.to_string(), "404");
        assert_eq!(Default::MysteryPerson.to_string(), "mp");
        assert_eq!(Default::Identicon.to_string(), "identicon");
        assert_eq!(Default::MonsterId.to_string(), "monsterid");
        assert_eq!(Default::Wavatar.to_string(), "wavatar");
        assert_eq!(Default::Retro.to_string(), "retro");
        assert_eq!(Default::RoboHash.to_string(), "robohash");
        assert_eq!(Default::Blank.to_string(), "blank");
        assert_eq!(
            Default::ImageUrl("anonymous@example.com".to_string()).to_string(),
            "anonymous%40example.com"
        );
    }
}
